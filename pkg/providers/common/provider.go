package common

import (
	"encoding/json"
	"fmt"
	"github.com/ppc64le-cloud/kubetest2-plugins/pkg/providers"
	"github.com/ppc64le-cloud/kubetest2-plugins/pkg/tfvars"
	"github.com/spf13/pflag"
	"io/ioutil"
	"math/rand"
	"path"
	"time"
)

const (
	Name ="common"
)

var _ providers.Provider = &Provider{}

var CommonProvider = &Provider{}

type Provider struct {
	tfvars.TFVars
}

func (p *Provider) BindFlags(flags *pflag.FlagSet) {
	flags.StringVar(
		&p.ReleaseMarker, "release-marker", "ci/latest", "Kubernetes Release Marker",
	)
	flags.StringVar(
		&p.BuildVersion, "build-version", "", "Kubernetes Build Version",
	)
	flags.StringVar(
		&p.ClusterName, "cluster-name", "", "Kubernetes Cluster Name, this will used for creating the nodes and directories etc(Default: autogenerated with k8s-cluster-<6letters>",
	)
	flags.IntVar(
		&p.ApiServerPort, "apiserver-port", 992, "API Server Port Address",
	)
}

func (p *Provider) DumpConfig(dir string) error {
	filename := path.Join(dir, Name + ".auto.tfvars.json")

	config, err := json.MarshalIndent(p.TFVars, "", "  ")
	if err != nil {
		return fmt.Errorf("errored file converting config to json: %v", err)
	}

	err = ioutil.WriteFile(filename, config, 0644)
	if err != nil {
		return fmt.Errorf("failed to dump the json config to: %s, err: %v", filename, err)
	}

	return nil
}

// randString generates n number of random char string
func randString(n int) string {
	letterBytes := "abcdefghijklmnopqrstuvwxyz"
	rand.Seed(time.Now().UnixNano())
	b := make([]byte, n)
	for i := range b {
		b[i] = letterBytes[rand.Intn(len(letterBytes))]
	}
	return string(b)
}

func (p *Provider) Initialize() {
	if p.ClusterName == "" {
		p.ClusterName = "k8s-cluster-" + randString(6)
	}
}
