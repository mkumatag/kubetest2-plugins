// Code generated by vfsgen; DO NOT EDIT.

// +build release

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 8, 16, 12, 39, 55, 350365276, time.UTC),
		},
		"/config.tf": &vfsgen۰FileInfo{
			name:    "config.tf",
			modTime: time.Date(2020, 8, 16, 12, 39, 55, 350250419, time.UTC),
			content: []byte("\x74\x65\x72\x72\x61\x66\x6f\x72\x6d\x20\x7b\x0a\x20\x20\x72\x65\x71\x75\x69\x72\x65\x64\x5f\x76\x65\x72\x73\x69\x6f\x6e\x20\x3d\x20\x22\x3e\x3d\x20\x30\x2e\x31\x32\x22\x0a\x7d\x0a"),
		},
		"/powervs": &vfsgen۰DirInfo{
			name:    "powervs",
			modTime: time.Date(2020, 8, 16, 13, 5, 27, 426695399, time.UTC),
		},
		"/powervs/instance": &vfsgen۰DirInfo{
			name:    "instance",
			modTime: time.Date(2020, 8, 15, 8, 25, 7, 108548591, time.UTC),
		},
		"/powervs/instance/README.md": &vfsgen۰FileInfo{
			name:    "README.md",
			modTime: time.Date(2020, 7, 14, 5, 51, 55, 184000000, time.UTC),
			content: []byte("\x54\x68\x69\x73\x20\x77\x69\x6c\x6c\x20\x64\x65\x70\x6c\x6f\x79\x20\x61\x20\x6c\x70\x61\x72\x20\x69\x6e\x20\x61\x20\x50\x6f\x77\x65\x72\x56\x53\x20\x69\x6e\x73\x74\x61\x6e\x63\x65\x20\x76\x69\x61\x20\x70\x72\x69\x76\x61\x74\x65\x20\x6e\x65\x74\x77\x6f\x72\x6b\x0a"),
		},
		"/powervs/instance/main.tf": &vfsgen۰CompressedFileInfo{
			name:             "main.tf",
			modTime:          time.Date(2020, 8, 15, 7, 21, 30, 146539299, time.UTC),
			uncompressedSize: 1384,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\xcd\xce\xdb\x20\x10\xbc\x47\xca\x3b\x20\xf7\x62\x57\x15\xbe\x54\xbd\xf9\x49\xaa\x0a\x11\xd8\xe6\x43\x9f\xf9\x11\x8b\xfd\xd5\xaa\xfa\xee\x95\x89\x0d\x98\x58\x39\x56\xcd\xc9\x64\x67\x96\x9d\xd9\xa1\xef\x25\x0f\x9c\x34\xea\xa6\x99\x07\xb4\x93\x17\xc0\x94\xc1\xc0\x8d\x80\x86\x34\xf9\xf3\xf7\xf5\xd2\xf7\x84\x10\x62\xb8\x06\x32\x90\x99\x7b\xea\xec\x07\xf8\x19\x19\x82\x9f\x55\x41\x5c\xa1\x7f\xae\x97\xeb\x25\x37\x77\x8a\x19\x08\x1f\xd6\xbf\x37\xa4\x89\xbc\xfd\x8c\xb1\xf7\xda\x59\xd8\xc9\x04\x52\xfd\x06\x32\x82\xb9\x87\xb7\x76\xbd\x70\xa7\x74\x0f\x42\x6e\xca\xe2\x54\x1b\xa1\x44\x7e\x8f\x4d\xa9\x32\x12\x7e\xfd\x78\xb0\x3e\x39\xc5\xc4\x68\x27\x99\xe6\x65\x4a\x92\x81\xac\xc3\xd2\x53\x23\x68\xfe\x90\xe9\xe6\xb3\x16\xaf\x4c\x61\x2b\xf7\xd9\x15\xa5\xf9\x1d\x92\x27\xf1\x94\x1d\xd9\xeb\x85\xbc\x5d\x60\xfe\xff\x3f\x51\xd5\xf7\xa3\x15\x7c\xc4\x22\x29\xdb\x6e\x94\x44\x32\x10\x61\x8d\xe0\xa1\x3d\x86\x81\xba\xe9\x36\x2a\x91\x8e\x9f\xa9\x92\x5f\xf2\xcc\x25\xf0\x90\x99\x08\xec\x52\xce\x76\x6d\xd9\xd5\x1c\x61\x37\xeb\x43\x8a\x37\xa1\x1a\xb4\xf5\x4b\x15\xb5\x55\xe9\xa3\x90\x70\xce\x5b\x01\x88\xd6\x63\x85\xcb\x85\xbc\xab\xdd\x94\x3a\x8d\xb3\x2e\x36\xb5\x35\x65\x61\x71\x50\x5f\x9e\x0a\xd5\xfe\x95\x3c\xcc\x59\x1a\x14\x01\xb4\x8c\x4f\xb9\xcf\x72\x07\xa7\xf4\x17\xfe\xa6\x26\xef\xb0\x30\xc7\x95\x7f\xd2\x85\xf8\x16\x8b\x07\x71\xb8\x60\xa5\x6d\x47\x2f\x18\x40\x17\xf2\xce\x33\xfb\x8f\x42\xbb\x71\x27\x04\xcf\xe2\x8b\xac\xa6\x4d\x85\x3c\xeb\x29\xf6\xc6\x11\xbe\x7d\x05\x23\xac\x84\xf6\xa7\x1a\xa1\x6d\x56\x1c\x55\x77\xd3\x74\xdd\xf6\x38\xfe\x06\x00\x00\xff\xff\xf8\xaf\x8e\xd8\x68\x05\x00\x00"),
		},
		"/powervs/instance/outputs.tf": &vfsgen۰CompressedFileInfo{
			name:             "outputs.tf",
			modTime:          time.Date(2020, 8, 15, 8, 25, 7, 108394940, time.UTC),
			uncompressedSize: 397,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xce\xc1\xa9\xc3\x30\x0c\xc6\xf1\xbb\xc1\x3b\x88\x0c\xf0\x36\x78\xb3\x08\x35\x11\x8d\x20\xb6\x85\x25\xe7\x52\xba\x7b\x69\x4b\x52\xea\x9b\x7b\x13\x88\xff\x8f\x2f\x86\xd2\x5c\x9b\xc3\x64\x4e\xde\x6c\x82\x5b\x0c\x00\x00\x3b\x6d\x8d\xe1\x1f\xe4\x92\x50\x05\x25\x9b\x53\x9e\xf9\x4f\xf7\x74\xde\xef\x24\x86\x7b\x0c\x1f\x27\x49\x46\xad\x65\x1e\x92\x8e\x88\xcd\x4a\xed\xc5\x95\x69\xf3\x15\x7f\x18\xf8\x55\x76\x2a\x2d\x4b\x65\x33\x1e\x13\xcf\xaa\xd3\xb4\x96\xeb\xf3\x31\x84\xa9\xe0\xd1\xbd\xb8\x47\x00\x00\x00\xff\xff\x90\xfb\xf8\x3a\x8d\x01\x00\x00"),
		},
		"/powervs/instance/provider.tf": &vfsgen۰CompressedFileInfo{
			name:             "provider.tf",
			modTime:          time.Date(2020, 8, 15, 8, 4, 41, 66744307, time.UTC),
			uncompressedSize: 231,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x81\xdc\xe1\x13\xf7\xa1\x6e\xc4\x4d\xbc\x4a\x69\xed\x20\x83\x6d\xa6\x8c\x18\x50\xf1\xee\x52\x33\x88\x0a\x9d\xe5\xfb\x8f\x37\xde\xcd\x2a\x85\x07\x52\x04\xee\xa7\x80\x87\x77\x00\x50\x48\x2f\x2c\x19\x9f\x4b\x08\x87\x84\x6d\xdc\xc7\x26\x54\x85\xfb\xe9\x38\xca\x75\x68\xbb\x99\xdb\x33\xdd\x90\x50\x3a\x8d\xff\xb8\xca\x4a\xa7\x25\x97\x10\x46\xc9\x16\xb8\x4b\x26\x23\xcd\xce\xd8\xc6\xc4\xef\xc7\x3f\xd5\xba\x9b\xfc\x2e\x60\x5d\x5e\x76\xef\x9e\xde\xbd\x02\x00\x00\xff\xff\xbd\x8e\x52\xb5\xe7\x00\x00\x00"),
		},
		"/powervs/instance/variables.tf": &vfsgen۰CompressedFileInfo{
			name:             "variables.tf",
			modTime:          time.Date(2020, 8, 15, 7, 26, 57, 270608748, time.UTC),
			uncompressedSize: 2271,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x4d\x6f\xdb\x46\x10\x86\xef\x02\xf4\x1f\x5e\xa8\x97\x16\x28\xad\x46\x28\x8a\xa4\x40\x0e\x4e\x0c\xb8\x06\xe2\xc2\x88\x1b\x5f\x99\xd5\xee\x50\x5c\x98\xbb\x23\xec\x87\x5c\xb5\xc8\x7f\x2f\x76\x49\x5a\x92\xa5\x55\x9d\x8b\x44\x41\x33\xf3\xcc\xbc\xf3\xc1\xe9\x64\x23\x9c\x16\xcb\x8e\x30\xd3\x4b\x23\x3b\x8e\xaa\x16\x6b\x5d\x3f\xd2\x76\x86\x7f\xa7\x13\x00\x50\xe4\xa5\xd3\xeb\xa0\xd9\xe2\x3d\x66\x57\x64\x39\x90\x47\x68\x09\x37\x1f\x6e\xf1\x31\x39\xe1\xf2\xee\x06\x8f\xb4\x45\x60\x44\x4f\xb3\xe9\xe4\xdb\x74\x32\x9d\xcc\xe7\x27\xe2\x3b\x5a\x69\xb6\x39\xfc\x7c\x7e\x06\xf0\xd4\x6a\xd9\xee\x21\x7a\xbf\x44\x90\x6c\x2d\xc9\x80\xc0\xb3\x14\xe3\x5b\xfa\x28\xc0\xfe\x61\x4b\xdf\x8f\x4a\x5e\x87\x20\x54\xb8\xd0\x17\xf4\x3b\x28\x56\x8a\xaa\x37\xc3\xf7\x02\x88\xbe\xf2\x1c\x43\x0b\x0a\xf2\x62\xcc\x67\x5f\xd8\x8d\xa9\xad\x30\x54\xd2\xf3\x4f\x61\x08\xdc\x64\x3d\x1f\x6e\x47\xe5\x7e\xc0\x35\x87\x5e\xe3\x2b\x34\x8e\x0d\xbe\x8e\x35\xc1\x91\xe7\xe8\x24\xc1\x93\xdb\x68\x49\x95\xb6\x3e\x08\x2b\xc9\xa3\xaa\x3a\xb6\x2b\x34\x9a\x3a\xf5\x15\x92\x8d\x11\x56\xfd\x0c\x47\x0d\x39\x5c\x7f\x49\xb1\xd8\xe5\xb0\xa3\xcf\xa1\x6e\x6b\x7e\x22\xb7\xf1\xf5\x10\xb9\x1e\xad\xca\x12\xde\x25\x0f\x3c\x68\x17\xa2\xe8\x70\x4f\x6e\x43\x6e\x4c\xec\x19\x82\x2c\xc0\x09\x6d\x4a\xbc\x5a\xab\x92\x5e\xaf\x03\xde\x5c\x8d\x4a\xee\x60\x86\x0c\xbb\xe2\x5c\x5f\x1a\x8e\x36\xa4\x4e\xf4\x76\xf8\xf1\xfa\xc3\x4f\xa9\xf3\x4b\x82\xe8\x3a\x96\x22\x90\x4a\xbf\x0f\x1b\xb5\x57\x8b\x63\x49\xde\xb3\xf3\xc5\x56\x47\xb3\x24\x97\x10\x9b\x21\xfd\x9d\x4f\x8a\x3c\x62\xfe\x8f\x52\x87\xed\xba\x38\x4f\x77\x63\x48\x24\xab\xe7\x7e\x7f\xba\xbb\xfc\x8c\x0a\xbe\x15\x8e\xd4\x5c\x91\xd2\xb9\xa0\xd9\x18\xa3\x11\xb1\x0b\xe9\x31\xc5\xe8\xad\x8e\xe1\xde\xb7\xe9\x34\x9c\x9d\xe7\xfb\xfb\x3f\xf2\x25\x48\x36\xd0\x76\x6f\xab\x7a\x2d\xa3\x27\x95\xb3\x4a\x86\x1d\xaf\xb4\xf5\x27\x40\x29\x81\xf4\x58\xa4\xb4\x1c\x3b\x95\x2b\x53\x22\x08\x6c\xb8\x8b\x86\x52\xfc\x3e\x77\xb0\x83\xe5\x80\x0a\xc1\x45\x9a\x37\xa2\xcb\x57\xe9\x44\xad\xe3\x5f\x2f\x32\xb0\x14\x9e\xd8\x3d\x16\x7b\xf9\x49\xfb\x3c\x2c\xa3\x1d\x42\x2b\x02\x7c\x9f\x56\x1a\x99\x10\x84\x6c\xf7\x27\x06\x15\x3e\x3a\xca\xed\x6d\xb5\x1f\x1d\xb1\xa4\x86\x1d\xc1\x45\x6b\xb5\x5d\x21\x90\x73\xa2\x61\x67\x4e\xb4\x3e\x2e\x3b\x2d\xeb\xc1\xb1\xa8\x0c\x59\x95\x8b\x86\x6e\xd0\xbb\x3c\xb3\x2c\xd1\xd8\x86\x31\xbf\x17\xa2\xbc\x47\xd6\xe3\xb8\x21\x5b\x1f\xc8\x9c\x1d\xbc\xbf\xd2\xb8\x71\x83\xde\x14\x6c\x87\xb3\x3a\x54\xbf\x93\x46\x66\x15\x54\x9a\xc6\x77\x8b\xc5\x9c\xde\xbe\xfd\xa5\x30\x86\xef\x16\x8b\x63\x19\xb4\x11\x2b\x7a\xf5\x49\xcd\xd6\xfd\x05\x2d\xa4\xa3\x68\xdd\xf1\x36\xe7\x93\x66\x55\x0f\x2e\xc3\xc9\x7a\x01\x77\xb4\xee\xd2\xe6\x68\xb6\xf5\x9a\x3b\x2d\x8b\xf7\xe4\xf3\xce\x12\xbd\xe5\xc1\x95\x3f\x51\xae\x4d\xef\xaa\xb3\x44\x2f\x5b\x2a\x97\xbd\x4f\xec\x2d\x9f\xb7\xbf\x84\xf4\xb1\x69\xf4\xdf\x45\xa8\x0d\xaf\xb8\x65\x0f\xb7\xd8\xbd\x80\x02\x0f\x7a\x9e\xe6\xbd\x39\x46\x45\x4f\xae\x4e\x3b\x5c\x22\x7d\xf1\xe4\xfa\x25\xd7\x16\x4b\xe1\xe9\xb7\x5f\x41\x56\xb2\xea\xef\x88\x11\xe1\x68\x86\x67\x3d\xe6\xbf\x00\x00\x00\xff\xff\x0c\xd6\xf1\xb3\xdf\x08\x00\x00"),
		},
		"/powervs/main.tf": &vfsgen۰CompressedFileInfo{
			name:             "main.tf",
			modTime:          time.Date(2020, 8, 16, 13, 5, 27, 426570868, time.UTC),
			uncompressedSize: 1162,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcd\x6e\xe3\x3c\x0c\xbc\xfb\x29\x08\xe2\x3b\xb4\x1f\x56\xaa\xb1\xad\xdd\xec\xc1\x87\x7d\x8e\x20\x30\x14\x8b\x75\x8d\x58\x96\x21\xca\xe9\x1f\xfa\xee\x0b\xfa\x2f\x49\x7f\x0e\x0b\xac\x6f\x1e\x51\x9c\xe1\x0c\x65\x4d\x34\x80\xcd\xde\x95\x81\xd8\x0f\xa1\xa2\xb2\x0e\x7e\xe8\x11\x30\xd4\x08\x6f\x09\x40\x67\x1c\x41\x01\x47\x13\x74\xb3\x77\x55\xeb\x07\xfb\xa1\x38\x79\x4f\x92\x2f\x1a\x35\x1d\x47\xd3\x55\x84\x80\x91\x38\xaa\xde\x76\xac\x4e\xe0\x77\xbd\x6d\xc7\xa5\xe0\x09\xc0\x25\x4d\xd9\x58\x28\x40\x88\xf4\x67\xc1\x3a\xd4\xba\xb1\x97\x4a\xa4\xd3\xab\xef\x88\x11\xd0\x72\x29\xfc\xf2\x3b\x51\x2f\x42\xbe\xeb\xba\x9c\xeb\xcf\xda\x75\x3d\x4c\x54\xce\xdb\xa1\x25\x40\x67\x38\x52\x98\xfa\x4e\xd7\xa1\x00\xd4\x37\xeb\xb0\x89\x10\x2e\x03\x9a\xbe\x29\x0f\xf4\xf2\x71\xee\x19\x96\x4a\x67\x6a\x2a\x67\x6f\xb0\xa2\x2e\x7a\x56\x1b\x4c\x00\x1c\x39\x1f\xe4\x26\x8e\xbf\x1d\xc5\x27\x1f\x0e\x0c\x05\x6c\xf1\xb0\x61\x35\x6a\x9d\x51\xdc\x25\x00\xbd\x7f\xa2\x70\xe4\x92\x29\x1c\x9b\xb3\xa9\xa6\xa9\xd1\x52\xfe\x90\xa5\x94\xaa\xfb\x6a\x93\xa9\xbb\x5f\xf9\x9d\xda\xdc\x66\x95\xca\xed\x7d\x7e\x9f\xfd\x4c\x6d\x9e\xe5\x42\xd4\x07\x5f\x11\xb3\x0f\x42\x85\xa9\xce\x04\x64\x7e\x14\xc1\xab\x50\x77\x18\x9c\x89\xa6\x56\xfd\xb0\x57\x07\x7a\x91\x9a\xa3\x2b\xcf\x32\xae\xda\x41\x8c\x5a\xe2\x1d\x98\x42\x39\xc6\x55\xc0\xde\x30\xe5\x77\xd4\x55\xde\xd2\xd5\x43\xd3\xd2\x15\xfe\xf7\xd6\x9b\xf8\xa8\x27\x93\xdf\x6f\xd6\x6a\x1d\x9f\x23\x5e\x5f\x4b\x00\x4b\x5a\xa7\xbc\xd7\xfc\x02\x55\x3e\xd8\x8b\xdd\x5b\xce\xd4\x74\xa6\xcc\x3f\xda\x04\x00\x59\x2b\xb9\x2e\x5f\x01\xad\xaf\x4c\xab\x05\x6b\x2c\x6f\x2f\x42\x1e\x0b\x65\x7c\x09\x27\xbe\xf4\x04\xf3\x57\x00\xfe\xc6\xe5\x45\xac\xd8\x17\xa6\x85\xd1\xb0\xa5\x60\x32\x47\x4f\x0b\xa8\x8d\xb5\x81\x98\x89\xb7\xe9\x4e\xd3\x73\xa4\xd0\x99\xb6\x6c\x7a\xe1\x8a\x2d\x9c\xfa\xde\xe6\x69\x2a\xfe\x8d\x4a\x79\x74\x61\x96\x0b\x05\xbc\x36\xbd\x33\xfd\xd5\x6a\xc4\xfa\x8c\xf4\xd9\x23\xd2\x2b\xba\xfd\x7f\xb7\x45\x11\x87\xbb\x1f\xf0\x57\x97\x66\xd7\x70\x27\x59\xfe\x09\x00\x00\xff\xff\x20\xfc\x6b\xe7\x8a\x04\x00\x00"),
		},
		"/powervs/output.tf": &vfsgen۰FileInfo{
			name:    "output.tf",
			modTime: time.Date(2020, 8, 15, 7, 17, 37, 342454456, time.UTC),
			content: []byte(""),
		},
		"/powervs/provider.tf": &vfsgen۰FileInfo{
			name:    "provider.tf",
			modTime: time.Date(2020, 8, 15, 6, 52, 45, 263831704, time.UTC),
			content: []byte("\x70\x72\x6f\x76\x69\x64\x65\x72\x20\x22\x69\x62\x6d\x22\x20\x7b\x0a\x20\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3d\x20\x22\x3e\x3d\x20\x31\x2e\x38\x2e\x30\x22\x0a\x20\x20\x69\x62\x6d\x63\x6c\x6f\x75\x64\x5f\x61\x70\x69\x5f\x6b\x65\x79\x20\x3d\x20\x76\x61\x72\x2e\x69\x62\x6d\x63\x6c\x6f\x75\x64\x5f\x61\x70\x69\x5f\x6b\x65\x79\x0a\x7d"),
		},
		"/powervs/user_data.txt": &vfsgen۰CompressedFileInfo{
			name:             "user_data.txt",
			modTime:          time.Date(2020, 8, 15, 8, 26, 57, 137242173, time.UTC),
			uncompressedSize: 3935,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x6d\x6f\xe3\x36\x12\xfe\x9e\x5f\x31\xa7\x0d\xd0\xee\xb6\x24\xed\x24\xdd\x24\x06\x74\x80\x9b\x38\x6d\xb0\x2f\x09\x9c\xec\x75\x71\xbb\x8b\x80\x26\xc7\x32\x6b\x8a\xd4\x91\x94\x93\x5c\x2e\xff\xfd\x40\x59\x92\xe5\xac\xb2\x3d\xe0\x5a\x7f\x91\xc4\x99\x67\xe6\xe1\x70\x66\x38\x7e\x21\xb4\x2d\x25\x11\xd6\xcc\x55\xb6\xf3\x02\xae\x17\xca\x83\xf2\xc0\xa1\x2b\x80\xb9\xd2\x08\x73\xeb\x60\xe6\x94\xc9\x94\xc9\x20\x2c\x10\x96\x47\x1e\x72\xee\x03\x3a\x30\x56\x22\x94\x05\x70\x23\xc1\x95\xc6\x28\x93\xed\xec\xdc\x3a\x15\xf0\x26\x62\xfd\x68\x07\x80\x80\xb0\x26\xa0\x09\x23\xf8\xcf\x0e\x54\xbf\x87\xfa\x09\x90\xe0\x1d\x0a\x62\x8b\xe0\x93\x11\x7c\x4a\x0c\x0f\x6a\x85\x54\x64\xce\x96\x85\x74\x6a\x85\x2e\xf5\xf7\x3e\x60\x2e\x93\x2f\x3f\x6e\x50\xda\x66\x64\x2d\x4e\x46\x90\xfc\xee\xad\x21\xd1\x5f\xf2\x44\xa5\xb6\xbb\x71\x07\x90\xe4\xfc\x8e\x78\xf5\x6f\x8c\xc0\xe1\x60\x90\x27\xad\xf0\xb1\x83\xf6\xc1\x3a\x9e\x61\xc7\x89\x5d\xa1\xd3\xfc\x7e\x2f\xe9\xd1\x6a\xf8\x77\xfd\x34\xfa\x34\xbe\x38\x25\xf1\x66\x89\xce\xa0\xbe\x11\x0b\x14\xcb\x34\xb8\x12\x37\xae\xbb\x7b\xcb\x43\x99\x8c\xe0\x78\x30\x18\xd4\x6b\x8f\xd5\xb3\xe0\x61\x31\x02\x86\x41\x30\x69\xc5\x12\x1d\x93\x1c\x73\x6b\x68\xdc\x7d\x7f\x98\x3f\x7d\x30\x2a\x7c\xa9\x3f\x4e\xd1\x0b\xa7\x8a\xa0\xac\x49\x97\xe5\x0c\x35\x86\x11\x5c\x2f\x10\xde\x94\xb3\x48\x2c\xa0\x87\xf7\xf1\x38\xc7\x19\x9a\xd0\x80\xac\x28\x73\x34\x81\x57\xb0\x45\x08\x85\x1f\x31\xb6\x6c\x11\x54\xd9\xc8\xc6\xb3\x5a\xff\x37\x6e\x82\x4f\x0d\x86\x5b\xeb\x96\xc4\x1a\xad\x0c\xd2\xc0\x5d\x86\x8d\xc5\xf1\x3c\xa0\x7b\x46\xa3\xa1\x7d\x85\x6e\xa5\x04\x36\xcc\x27\x66\xa5\x9c\x35\x91\x47\x9a\xbc\xf9\xf0\xf3\xe4\xed\xe4\xfa\xe6\xe4\xe2\xfd\xd9\xf9\x2f\x37\xe3\xe9\x2f\x57\x29\xa9\xf3\x35\x65\x2b\xee\x98\x56\x33\x56\x6f\x90\xad\xd7\xe9\x3d\xcf\x75\xf2\x2d\x6b\xf1\xb9\x6d\x71\x66\x6d\xf0\xc1\xf1\x82\x44\x5b\x8d\xfd\x18\xfd\xcd\xee\xd9\xb6\x92\xc6\x40\xa3\x22\x90\x6f\x61\xba\x9a\x7f\xc8\x69\x7c\xfa\xae\xdd\x62\x55\x13\x64\xbb\x28\x80\x90\x26\x94\x85\x2e\x33\x65\x52\x61\x14\x10\x52\x58\x49\x94\x99\x3b\x1e\x23\x13\xb8\x32\xe8\x88\xca\x79\x86\xe9\xf2\xc8\xd3\x4c\xb8\x78\x70\x05\x2f\x3d\x8e\xf6\xe9\x5e\x4b\xe3\x0e\xc5\x55\xe0\x2e\xa4\xac\xf4\x8e\x69\x2b\xb8\x66\x33\x65\x1a\xce\xb0\xfb\x4c\xbc\x36\x82\xde\xc5\xee\x4e\x36\xab\x93\x8f\xd7\xd3\x71\xb5\x56\xbb\x9f\xa2\xaf\x9c\x73\x7d\xcb\xef\x7d\xbd\x58\xf1\x79\xab\x72\x15\xce\x4d\x40\xb7\xe2\x3a\x1d\x6c\xeb\x5f\xa1\x48\x87\x83\x36\x79\xce\x8d\x0f\x5c\xeb\x2f\x9d\x8c\x44\xf9\xf3\x7d\x9a\x97\x3a\x28\x52\x7a\x74\xdd\x84\xac\xab\xaa\xda\xae\x9a\xb1\x3a\xac\xf5\xb3\x3d\x2b\xbf\x4e\xc8\xfe\x2a\x7b\xf1\xb7\x0a\x1e\xe3\x84\x66\x05\x33\xee\x17\x8d\x04\x9a\x8a\xa9\x1b\x05\xcd\xac\xcd\x34\xf2\x42\x79\x2a\x6c\xde\x49\x0b\xe2\x50\x23\xf7\x48\x24\xae\x98\x50\x4c\xf3\x80\x3e\xd0\x70\x17\xd6\xfd\xb7\x54\x5a\x82\x29\xf3\x19\xba\x26\x32\x27\xe7\x37\xff\x98\x4c\xaf\xce\x2f\xde\xa7\xbb\x0f\x9b\x8f\x11\x49\x56\x43\xba\x37\xa0\x03\xc2\x75\xb1\xe0\x74\x40\x7f\x1a\xfe\xf4\xc3\xfe\xd1\xde\x70\x70\x88\xaf\xc5\xd1\xc1\xfe\xe1\x41\xf2\xd8\x94\xe3\xf4\xe4\xd7\x74\xf7\x21\x3e\x46\x24\x29\x0a\xf1\xfa\x40\x63\x2b\x9d\x4e\xde\x4e\xc6\x57\x93\x9b\x77\xe3\xe9\x9b\xc9\x34\xdd\x7d\xd8\x5e\x18\x91\xa4\xa5\x9a\x3c\x36\x27\x80\x62\x61\x21\x39\xb5\xb7\x46\x5b\x2e\xe3\xa5\x51\x55\x43\xd0\x94\xd2\x26\xd3\x44\xe9\x34\x10\x7f\xf5\xb6\x8d\x90\xd4\x34\xa6\xa6\xb2\x71\xf7\xdd\xfd\x3c\x56\x91\xd5\xca\x94\x77\x6c\x4d\xf4\x91\xd5\x06\xe1\xef\xd0\x93\xa8\x22\xe8\x6f\x32\x89\x07\xfa\xa7\x32\x89\x95\xd1\xcb\x44\xb7\x5d\xaf\x9f\x09\x97\xf9\x9f\xcb\x84\xcb\xbc\x9f\x09\x97\x79\x73\x3c\x62\x91\x5b\x09\x3f\xdc\xf5\xa9\xbd\x6a\xda\xfe\xc5\xc9\x9b\xc9\xf4\xe6\x7a\xf2\xee\x32\xdd\xfd\x3e\x5f\x06\xcc\x0b\x20\xf2\x65\x2d\xbe\xcd\x30\xb4\x24\x6d\xa1\xf9\xec\x98\x16\xdc\xfd\x2b\xa0\xa0\xa5\x51\x82\xe7\x05\x9d\x39\x56\x94\x33\x56\x65\x14\xea\xe6\xca\x5a\xa1\xf3\xca\x1a\x32\x3c\xa6\x83\x7d\x7a\xc4\x04\x9a\x60\x7d\x2d\x25\x02\x1b\x01\xd9\xa7\xa8\x0f\x69\x9d\x8f\xd4\x15\x39\x90\x4b\xd8\x7d\xe8\x10\x7b\xfc\xeb\xc9\x08\xad\xfe\x5f\x42\x52\xd3\x39\x4a\xeb\x78\xe1\xec\xef\x28\x02\xb5\x2e\xab\xb8\x60\x81\x9a\x1d\xb2\xda\x20\xbb\xe4\x62\xc9\x33\xf4\x4c\xb0\xb6\x63\x4b\x32\xa4\x7b\xf4\x80\x0c\xff\x07\xd7\xb5\xef\xfb\x32\x07\xb5\x6e\x80\x40\xee\x63\xaf\x32\xc1\x71\xb1\x24\xc1\x5a\xed\xc1\x5b\xc1\x03\x04\xd1\xaf\xbd\x6d\x92\xbd\x8a\xae\x3a\x9a\x0e\x73\xbb\xc2\xa8\x58\x58\x99\x73\x53\x8b\xd6\xad\x32\x56\x23\x1a\x3e\xd3\x08\xeb\xf8\x7d\x25\xad\x7a\x75\x23\xac\xa5\xaa\x08\x11\xe2\xe3\x86\xce\xdf\x5f\x7e\xb8\x86\xf1\xc9\xc9\xe4\xf2\xba\x47\x7c\x76\x31\xfd\x6d\x3c\x3d\x7d\x5e\xe1\xe2\xc3\x75\xc7\x40\xdb\x81\xcf\x74\xe9\x17\x30\xd6\x1a\xce\x1b\xe5\x93\x05\x57\xc6\xb3\x33\xe5\xf0\x36\x6e\xdd\x95\x71\xf5\xc5\x57\x36\xcf\x36\x56\x4e\x63\x2d\x23\xf0\xaf\xcd\xf4\xe0\x3e\x3e\xf5\x1e\x61\xc2\x96\xf1\xfe\xf2\x10\xac\xed\xc1\xfc\xf3\x29\xc4\x48\x90\x1b\xa7\x86\x87\x6a\x09\x72\x6e\x32\x8d\x3d\x06\x42\xa5\x43\xce\x9e\x13\x7c\xec\x11\xd4\xc6\x7a\x41\x8d\xac\x0f\xe7\xf8\x6d\x3f\xa8\x12\xb4\xdb\xdf\x9c\xbd\xc3\xad\xd3\xaf\xc5\xb7\xbc\xb0\xf3\x39\x10\xfe\x35\x60\x3d\xda\xc6\x4b\xd1\x72\xf9\x5c\xa2\x6d\xb7\xd8\xa7\x99\xb6\x2d\x6d\xba\xa3\x43\x8f\x01\xc8\xbc\x5e\x76\x39\x10\x37\x5f\x4f\xd5\xc2\x28\x66\x30\x50\xf9\x04\xa2\x8c\x0a\x40\x48\xbc\xb4\xd1\xad\xd0\x91\x99\x32\x92\x14\xd6\x85\xf4\xf8\x78\x6f\x4b\x22\xd0\x05\x82\x77\xc1\x71\xe2\xb9\xf1\x50\xd7\x2c\x11\xba\x8c\x7f\x97\x62\x37\x6f\xdf\x85\xcd\xeb\x41\xad\x99\xe0\x84\x92\x2e\x1d\x1e\xee\x55\x97\x37\x1d\xb0\xe1\xeb\x7a\x92\xac\x47\x84\xba\x5f\xc1\xd3\x6b\xb8\xad\xfe\x7c\x29\x95\x03\x52\xc0\xee\xaf\x17\xef\x26\x8c\x46\x6c\x13\x9d\x52\x5a\x10\x05\x3c\x9d\x46\xb9\xcc\x95\x59\x4f\xad\x1d\x50\x3d\x37\x6f\x61\x17\xf6\xd6\xc0\xee\xf7\x4a\x02\x29\x5f\x8e\xd6\x2f\xd9\xcb\xe7\x51\xd5\x75\xd6\xb6\x41\x2b\x3c\xad\x5b\xa0\xe0\x5a\x09\x5b\x35\xc2\x9c\x1b\x35\x47\x1f\x3c\xab\x17\xe3\xa0\x0e\xe4\xa2\x71\x8c\x12\x88\x82\xef\x3c\x5b\x61\x58\xdc\xe4\xa1\xfc\x3c\xa2\xaf\xda\x8f\x11\x7c\x4e\x8e\x8e\x0f\x06\x9f\x13\xf6\x1d\x74\x0c\xec\x74\x0e\x30\xe6\x83\x70\xc8\x03\x02\x99\x6f\x29\xc1\x93\xe9\xaf\xbd\x08\x3b\x43\xfd\x91\xa7\x7e\xb1\xb3\xe3\x4a\x23\x72\xb9\xfe\x2f\xfb\xc9\x2f\x7e\xfc\x23\xc4\x97\xff\x06\x00\x00\xff\xff\x1a\x34\xd5\x66\x5f\x0f\x00\x00"),
		},
		"/powervs/variables-powervs.tf": &vfsgen۰CompressedFileInfo{
			name:             "variables-powervs.tf",
			modTime:          time.Date(2020, 8, 15, 12, 49, 46, 129368582, time.UTC),
			uncompressedSize: 564,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x41\x4b\xc3\x30\x14\xc0\xf1\x7b\x3f\xc5\xa3\xf7\x7a\x9a\xb2\x8b\x87\xb9\xc2\x6c\x65\xb5\x4c\x98\xce\x4b\x49\xd3\xb7\x2d\x34\x4b\xb2\xbc\xa4\x50\xc5\xef\x2e\xad\x05\x71\xb4\x08\xbb\xe5\xf0\xcf\xfb\xbd\xd7\x30\x2b\x58\x29\x11\x42\x51\x9e\xb8\xd4\xbe\x2a\x2c\x92\xf6\x96\x63\x71\xb0\xda\x9b\x10\x3e\x03\x80\x0a\x89\x5b\x61\x9c\xd0\x0a\xee\x21\x4c\x1e\xd6\xb0\xec\x62\xd8\x0c\x31\xac\xfa\xb8\x4f\xf7\xcc\x4b\xd7\x65\xf1\xcf\x33\x0c\xbe\x82\x60\x04\x62\x46\x14\x35\xb6\xa3\x42\x8c\x4a\x3b\x24\x70\x47\x84\x5f\x6d\x91\x27\x50\x63\x0b\x4e\x83\x27\xbc\xd0\x1e\xed\x6d\xb6\xde\xec\x92\xac\x2c\xce\xb2\xdd\xa5\x91\x6c\x8d\x8f\xaa\x19\x4b\x99\x49\x9f\xdf\xf6\x8b\x84\x1d\x9b\xf8\xe0\x5f\xcf\xab\xed\xd4\x4a\x95\xa2\x42\xb1\x13\xfe\x73\xf5\x36\x5f\x42\x6e\x45\xc3\x1c\x42\x9c\xbd\x40\xff\xe5\xef\x36\xf5\x9c\x22\x87\xe4\x68\x8a\xfa\xd0\x0a\xaf\xb1\xde\xb5\x42\xc8\x46\xc1\x9b\x0e\xbc\xf0\xb8\xf4\xe4\xd0\x4e\x4b\x4f\x73\x82\x21\x1a\xbb\xc3\x18\x7e\x37\x93\x18\x0d\x49\x37\xfd\x3b\x00\x00\xff\xff\x03\x2c\xa2\xe5\x34\x02\x00\x00"),
		},
		"/variables.tf": &vfsgen۰FileInfo{
			name:    "variables.tf",
			modTime: time.Date(2020, 8, 15, 3, 50, 37, 532586066, time.UTC),
			content: []byte(""),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/config.tf"].(os.FileInfo),
		fs["/powervs"].(os.FileInfo),
		fs["/variables.tf"].(os.FileInfo),
	}
	fs["/powervs"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/powervs/instance"].(os.FileInfo),
		fs["/powervs/main.tf"].(os.FileInfo),
		fs["/powervs/output.tf"].(os.FileInfo),
		fs["/powervs/provider.tf"].(os.FileInfo),
		fs["/powervs/user_data.txt"].(os.FileInfo),
		fs["/powervs/variables-powervs.tf"].(os.FileInfo),
	}
	fs["/powervs/instance"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/powervs/instance/README.md"].(os.FileInfo),
		fs["/powervs/instance/main.tf"].(os.FileInfo),
		fs["/powervs/instance/outputs.tf"].(os.FileInfo),
		fs["/powervs/instance/provider.tf"].(os.FileInfo),
		fs["/powervs/instance/variables.tf"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
